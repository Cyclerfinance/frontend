// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract VRFRequestIDBase {

  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,
    address _requester, uint256 _nonce)
    internal pure returns (uint256)
  {
    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(
    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}
// File: browser/LinkTokenInterface.sol

pragma solidity ^0.6.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);
  function approve(address spender, uint256 value) external returns (bool success);
  function balanceOf(address owner) external view returns (uint256 balance);
  function decimals() external view returns (uint8 decimalPlaces);
  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);
  function increaseApproval(address spender, uint256 subtractedValue) external;
  function name() external view returns (string memory tokenName);
  function symbol() external view returns (string memory tokenSymbol);
  function totalSupply() external view returns (uint256 totalTokensIssued);
  function transfer(address to, uint256 value) external returns (bool success);
  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);
  function transferFrom(address from, address to, uint256 value) external returns (bool success);
}
// File: browser/SafeMathChainlink.sol

pragma solidity ^0.6.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMathChainlink {
  /**
    * @dev Returns the addition of two unsigned integers, reverting on
    * overflow.
    *
    * Counterpart to Solidity's `+` operator.
    *
    * Requirements:
    * - Addition cannot overflow.
    */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  /**
    * @dev Returns the subtraction of two unsigned integers, reverting on
    * overflow (when the result is negative).
    *
    * Counterpart to Solidity's `-` operator.
    *
    * Requirements:
    * - Subtraction cannot overflow.
    */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a, "SafeMath: subtraction overflow");
    uint256 c = a - b;

    return c;
  }

  /**
    * @dev Returns the multiplication of two unsigned integers, reverting on
    * overflow.
    *
    * Counterpart to Solidity's `*` operator.
    *
    * Requirements:
    * - Multiplication cannot overflow.
    */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
    * @dev Returns the integer division of two unsigned integers. Reverts on
    * division by zero. The result is rounded towards zero.
    *
    * Counterpart to Solidity's `/` operator. Note: this function uses a
    * `revert` opcode (which leaves remaining gas untouched) while Solidity
    * uses an invalid opcode to revert (consuming all remaining gas).
    *
    * Requirements:
    * - The divisor cannot be zero.
    */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, "SafeMath: division by zero");
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
    * Reverts when dividing by zero.
    *
    * Counterpart to Solidity's `%` operator. This function uses a `revert`
    * opcode (which leaves remaining gas untouched) while Solidity uses an
    * invalid opcode to revert (consuming all remaining gas).
    *
    * Requirements:
    * - The divisor cannot be zero.
    */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0, "SafeMath: modulo by zero");
    return a % b;
  }
}
// File: browser/VRFConsumerBase.sol

pragma solidity ^0.6.0;




/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {

  using SafeMathChainlink for uint256;

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness)
    internal virtual;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   * @param _seed seed mixed into the input of the VRF.
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)
    internal returns (bytes32 requestId)
  {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash].add(1);
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface immutable internal LINK;
  address immutable private vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) public {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}
// File: browser/Decomposed.sol

pragma solidity ^0.6.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;

        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping (bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs
            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.

            bytes32 lastvalue = set._values[lastIndex];

            // Move the last value to the index where the value to delete is
            set._values[toDeleteIndex] = lastvalue;
            // Update the index for the moved value
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }


    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

pragma solidity ^0.6.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.6.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
// File: openzeppelin-solidity\contracts\utils\Address.sol



pragma solidity ^0.6.2;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function migrator() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
    function setMigrator(address) external;
}


// File contracts/uniswapv2/interfaces/IUniswapV2Router01.sol

pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File contracts/uniswapv2/interfaces/IUniswapV2Router02.sol

pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}
pragma solidity ^0.6.2;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


pragma solidity ^0.6.2;
pragma experimental ABIEncoderV2;
contract LINKConsumer is Ownable, VRFConsumerBase {

    bytes32 internal keyHash;
    uint256 internal fee;
    uint256 public randomResult;
    address private _caller;
    CYCLER private cyclerToken;

    /**
     * Constructor inherits VRFConsumerBase
     *
     * Network: Kovan
     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9
     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088
     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4
     */
    constructor(address cyclerAddr)
        VRFConsumerBase(
            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator
            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token
        ) public
    {
        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;
        fee = 0.1 * 10 ** 18; // 0.1 LINK
        cyclerToken = CYCLER(cyclerAddr);
    }

    /**
     * Requests randomness from a user-provided seed
     */
    function getRandomNumber(uint256 userProvidedSeed, address caller) public returns (bytes32 requestId) {
        require(msg.sender == address(cyclerToken), "caller must be Cycler contract");
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK - fill contract first");
        // set caller here so that when fulfillRandomness gets called we remember who called this
        _caller = caller;
        return requestRandomness(keyHash, fee, userProvidedSeed);
    }

    /**
     * Callback function used by VRF Coordinator
     */
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
        randomResult = randomness;
        DeJa(cyclerToken.dejaAddr()).getBuyCycleWinner(_caller, randomResult);
    }

    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {
        IERC20(tokenAddress).transfer(owner(), tokenAmount);
    }
}

contract PrizePool {
    constructor() public {
    }
}

contract BonusSupplyPool {
    constructor() public {
    }
}

// decentralized jackpot
contract DeJa is Context, Ownable {
    using SafeMath for uint256;
    using Address for address;
    using EnumerableSet for EnumerableSet.AddressSet;

    EnumerableSet.AddressSet private holders;

    CYCLER private cyclerToken;

    address private linkConsumerAddr;
    mapping (address => uint256) public potentialWinnerEntries;
    address[] public potentialWinners;

    uint256 public buysCount;
    uint256 public buyersLimit = 100;

    uint256 private _callerSize = 100;
    uint256 private _firstPlaceSize = 20;
    uint256 private _secondPlaceSize = 25;
    uint256 private _potentialWinnerCap = 10;


    bool public isBuyWinnerCallable = false;

    event AddedToDrawing(address sender);
    event RemovedFromHolders(address sender);
    event TooManyEntries(address sender);
    event BuyCycleWinners(address first, uint256 firstP, address second, uint256 secondP, address caller, uint256 callerP);
    event NewAwardsSet(uint256 first, uint256 second, uint256 caller);


    constructor (address cyclerAddr) public {
        cyclerToken = CYCLER(cyclerAddr);
    }

    function _addToPotentialWinnersList(address sender) internal {
        // we want to prevent spam entries and hard limit extra entries
        if(potentialWinnerEntries[sender] <= _potentialWinnerCap && buysCount <= buyersLimit) {
            potentialWinners.push(sender);
            potentialWinnerEntries[sender]++;
            emit AddedToDrawing(sender);
        } else {
            emit TooManyEntries(sender);
        }
    }

    /*
    @dev this is to have easier cleanup with getWinners()
    */
    function checkHolder(address sender, uint256 senderBalance) public {
        require(msg.sender == address(cyclerToken), "can only be called by cycler");
        if(holders.contains(sender) && senderBalance > 0){
            holders.add(sender);
        }
        if(senderBalance == 0) {
            holders.remove(sender);
            emit RemovedFromHolders(sender);
        }
    }

    function checkBCYCL(address sender, CYCLER.TState tState, bool hasFee) public {
        require(msg.sender == address(cyclerToken), "only cycler can call");
        if (hasFee && tState == CYCLER.TState.Buy) {
                if(buysCount <= buyersLimit) {
                    _addToPotentialWinnersList(sender);
                    buysCount++;
                } else {
                    isBuyWinnerCallable = true;
            }
        }
    }

    function getEntries(address caller) public view returns (uint256) {
        return potentialWinnerEntries[caller];
    }

    function getBuyCycleWinner(address caller, uint256 random) external {
        require(msg.sender == cyclerToken.LINKConsumerAddr(), "can only be called from LINK consumer contract");
        address first = potentialWinners[random.mod(potentialWinners.length)];
        address second = potentialWinners[random.mod(potentialWinners.length.div(2))];
        uint256 prizePoolRBalance10 = cyclerToken.getRBalance(cyclerToken.prizePool()).mul(10);
        uint256 firstPrize = prizePoolRBalance10.div(_firstPlaceSize);
        uint256 secondPrize = prizePoolRBalance10.div(_secondPlaceSize);
        uint256 callerPrize = prizePoolRBalance10.div(_callerSize);
        cyclerToken.awardWinners(first, firstPrize, second, secondPrize, caller, callerPrize);
        isBuyWinnerCallable = false;
        _resetPotentialWinners();
        emit BuyCycleWinners(first, firstPrize, second, secondPrize, caller, callerPrize);
    }

    function setPotentialWinnerCap(uint256 potentialWinnerCap) external onlyOwner {
        require(potentialWinnerCap >= 1, "limit must be greater than 0");
        _potentialWinnerCap = potentialWinnerCap;
    }

    function setRewardsForBCYCL(uint256 first, uint256 second, uint256 caller) external onlyOwner {
        uint256 oneK = 1000;
        require((oneK.div(first)).add(oneK.div(second)).add(oneK.div(caller)) == oneK, "reward distribution not 100%");
        require(first > second && second > caller, "!first > second > caller");
        _firstPlaceSize = first;
        _secondPlaceSize = second;
        _callerSize = caller;
        emit NewAwardsSet(first, second, caller);
    }

    function setBuyersLimit(uint256 _buyersLimit) external onlyOwner {
        // we want to put a hard limit on the size the array can grow to
        require(_buyersLimit > 2 && _buyersLimit <= 200, "can't have less than 2 buyers or more than 200");
        buyersLimit = _buyersLimit;
    }

    function _resetPotentialWinners() internal {
        uint256 holdersLength = EnumerableSet.length(holders);
        for(uint256 i=0; i < holdersLength; i++) {
            delete potentialWinnerEntries[holders.at(i)];
        }
        delete potentialWinners;
        potentialWinners = new address[](buyersLimit);
        buysCount = 0;
    }
}


// in charge of managing fees
contract FeeHandler is Context, Ownable {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _timeSinceLastBuy;
    mapping (address => uint256) private _timeSinceLastSell;

    address public lastBuyer;
    address public lastSeller;

    uint256 private _baseSellFee = 65; // 1.53%~
    uint256 private _opFee = 100;      // 1%
    uint256 private _txFee = 50;       // 2%
    uint256 private _bonusSupplyDivisor = 4; // 25%
    uint256 private _timeSinceLastFeeUpdate = block.timestamp;
    uint256 private _timeCheckInterval = 30 minutes;
    uint256 private _cycleLimit = 14;
    uint256 public currentCycle;
    uint256 private _timeTax = 2;
    uint256 public _burnRate = 200;     // .5%
    uint256 public TokenInLPBurn = 50; // 2%

    CYCLER private cyclerToken;

    // debugging
    CYCLER.RValues public lastRValue;
    CYCLER.TValues public lastTValue;
    CYCLER.TState public _lastTState;

    bool public _isCycling = true;

    constructor(address cyclerAddr) public {
        cyclerToken = CYCLER(cyclerAddr);
    }

    function checkCycle() public {
        require(msg.sender == address(cyclerToken), "only cycler can call");
        if(_isCycling && block.timestamp > (_timeSinceLastFeeUpdate.add(_timeCheckInterval))) {
            _cycleFees();
        }
    }

    function _cycleFees() internal {
        // we assume that ts is new since this was called
        _timeSinceLastFeeUpdate = block.timestamp;
        // we start over after the interval
        if(currentCycle >= _cycleLimit){
            currentCycle = 0;
        } else {
            // sanity check
            require(currentCycle > 0, "feeInterval should not be 0");
            currentCycle = currentCycle.add(1);
        }
    }

    function calculateTFees(address sender, uint256 tAmount, bool hasFee, uint256 tSupply, CYCLER.TState transferState) public view returns (CYCLER.TValues memory) {
        CYCLER.TValues memory t;
        t.amount = tAmount;
        if (hasFee) {
            bool isBuy = transferState == CYCLER.TState.Buy;
            bool isSell = transferState == CYCLER.TState.Sell;
            t.fee = tAmount.div(_txFee) ; //00 == 1%, 10 == 10%, 1 == 100%
            t.operationalFee = tAmount.div(_opFee); // we will use this to power the chainlink contract
            t.timeFee  = _getTimeTax(sender, tAmount, transferState); // timeFee goes to everyone and victim
            t.sellFee  = isSell ? (tAmount.div(_baseSellFee)).mul(currentCycle) : 0; // sellFee goes to bonusSupply()
            t.buyFee   = isBuy  ? tAmount.div(_getBuyTaxByWeight(tAmount, tSupply)) : 0; // buyFee added to prizePool()
            t.buyBonus = isBuy  ? _getBuyBonus(tAmount) : 0;   // added from bonusSupply
        }
        t.transferAmount = tAmount.sub(t.fee).sub(t.sellFee).sub(t.buyFee).sub(t.operationalFee).sub(t.timeFee);
        return t;
    }

    function _getBuyTaxByWeight(uint256 amount, uint256 tSupply) internal pure returns (uint256 buyWeightTax) {
        uint256 weightOfBuy = amount.mul(10000).div(tSupply);  //so 1% == 100
        uint256 _buyWeightTax;
        // smaller your buy higher your tax to prevent gaming the bonus pool
        if (weightOfBuy < 12 && weightOfBuy >= 0) {
            _buyWeightTax = 20; // 5%
        } else if (weightOfBuy < 25 && weightOfBuy >= 12) {
            _buyWeightTax = 25; // 4%
        } else if(weightOfBuy < 50 && weightOfBuy >= 25) {
            _buyWeightTax = 33; // 3%
        } else if (weightOfBuy >= 50 && weightOfBuy < 100) {
            _buyWeightTax = 50; // 2%
        } else {
            _buyWeightTax = 100; // 1%
        }
        return _buyWeightTax;
    }

    // we add the fees made from the potential bot to everyone
    // NOTE: this is solely to tax potential frnnerss
    function _getTimeTax(address sender, uint256 tAmount, CYCLER.TState tState) internal view returns (uint256) {
        if(tState == CYCLER.TState.Sell && _timeSinceLastBuy[sender] > 0) {
           return block.timestamp < _timeSinceLastBuy[sender].add(60) ? tAmount.div(_timeTax) : 0;
        } else if (tState == CYCLER.TState.Buy && _timeSinceLastSell[sender] > 0) {
           return block.timestamp < _timeSinceLastSell[sender].add(60) ? tAmount.div(_timeTax) : 0;
        } else {
           return 0;
        }
    }

    function _getBuyBonus(uint256 tAmount) internal view returns (uint256 bonus) {
        uint256 bonusSupply = cyclerToken.getRBalance(cyclerToken.bonusSupplyPool());
        // your buy amount needs to be at least the size of the bonusSupplyPool
        if(tAmount >= bonusSupply && bonusSupply > 0) {
            if(_lastTState == CYCLER.TState.Sell) {
                return bonusSupply.div(_bonusSupplyDivisor); // 4 = 25% can make this more customisable, require between 50% and 25%
            } else {
                return bonusSupply.div(_bonusSupplyDivisor.mul(3)); // 8.3% of the bonus supply for a buy then buy
            }
        }
        return bonus;
    }

    function getStats() public returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {
        return (_baseSellFee, _opFee, _txFee, _timeTax, _bonusSupplyDivisor, _timeCheckInterval, _cycleLimit);
    }

    function setSellFee(uint256 _sellFee) external onlyOwner {
        require(_sellFee >= 65, "sell fee can't be more than 1.5%");
        _baseSellFee = _sellFee;
    }

    function setTimeTax(uint256 timeTax) external onlyOwner {
        require(timeTax >= 2, "cannot be more than 50%");
        _timeTax = timeTax;
    }


    function setBurnFee(uint256 burnRate) external onlyOwner() {
        require(burnRate < _txFee, 'burnRate should be less than taxFee');
        _burnRate = burnRate;
    }

    function setTxFee(uint256 txFee) external onlyOwner() {
        require(txFee >= 25, 'taxFee should be in no greater than 4%');
        _txFee = txFee;
    }

    function setBonusSupplyDivisor(uint256 bonusSupplyDivisor) external onlyOwner {
        require(bonusSupplyDivisor >= 2, "bonusSupply reward can't be more than 50%");
        _bonusSupplyDivisor = bonusSupplyDivisor;
    }

    function setTimeCheckInterval(uint256 timeCheckInterval) external onlyOwner {
        require(timeCheckInterval >= 1, "timeCheckInterval must be greater or equal to 1");
        _timeCheckInterval = timeCheckInterval;
    }

    function setCycleLimit(uint256 cycleLimit) external onlyOwner {
        require(cycleLimit > 1 && cycleLimit <= 24, "more than 24 cycles");
        uint256 one = 100;
        // TODO check for this sets correctly
        require((one.div(_baseSellFee)).mul(cycleLimit) <= 40, "sellfee can't be more than 40%");
        _cycleLimit = cycleLimit;
    }

    // TODO remove R and T value after debugging
    function setLastTx(address sender, CYCLER.TState transferState, CYCLER.RValues memory r, CYCLER.TValues memory t) public {
        require(msg.sender == address(cyclerToken), "only cycler can call");
        if(transferState == CYCLER.TState.Buy) {
            lastBuyer = sender;
            _timeSinceLastBuy[sender] = block.timestamp;
        } else {
            lastSeller = sender;
            _timeSinceLastSell[sender] = block.timestamp;
        }
        _lastTState = transferState;
        lastRValue = r;
        lastTValue = t;
    }

    function setOpFee(uint256 opFee) external onlyOwner {
        require(opFee > 100, "opFee can't be more than 1%");
        _opFee = opFee;
    }

    function setTokenInLPBurnRate(uint256 _TokenInLPBurn) external onlyOwner {
        require(_TokenInLPBurn > 10, "can't burn more than 10% of LP tokens");
        TokenInLPBurn = _TokenInLPBurn;
    }

    function toggleIsCycling() external onlyOwner {
        _isCycling = !_isCycling;
        currentCycle = 1;
    }


}


contract CYCLER is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;


    string private _name = 'cycler.finance';
    string private _symbol = 'CYLR';
    uint8 private _decimals = 18;

    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isReflectExcluded;
    mapping (address => bool) private _isFeeless;
    mapping (address => bool) private _transferPairAddress;

    address[] private _reflectExcluded;
    address public bonusSupplyPool = address(new BonusSupplyPool()); // just an empty address
    address public prizePool = address(new PrizePool());             // just an empty address
    address public opAddr;
    address public currentPoolAddress; // same as TransferPairAddress
    address public currentPairAddress;
    address public LINKConsumerAddr;
    address public dejaAddr;
    address public feeHandlerAddr;

    uint256 public constant MAX = ~uint256(0);
    uint256 public _tTotal = 10 * 10**6 * 10**18;
    uint256 public _rTotal = (MAX - (MAX % _tTotal)); // play with this.
    uint256 public _tFeeTotal;
    uint256 public _tBurnTotal;
    uint256 private randomSeed;

    bool public paused = true;

    event BonusSupplyChange(uint256 buyRemoved, uint256 sellAdded);
    event Awarded(address first, uint256 firstPrize, address second, uint256 secondPrize, address caller, uint256 callerPrize);
    event AddedCompensationToVictim(address last, uint256 tCompensation, uint256 rCompensation);
    event TokensInLPBurned(uint256 rTokenLP, uint256 tTokenLP);
    event BurnedFromTotalSupply(uint256 burnedAmount);

    enum TxType { FromExcluded, ToExcluded, BothExcluded, Standard}
    enum TState { Normal, Buy, Sell }
    struct RValues {
        uint256 amount;
        uint256 transferAmount;
        uint256 fee;
        uint256 buyFee;
        uint256 sellFee;
        uint256 buyBonus;
        uint256 timeFee;
        uint256 operationalFee;
    }

    struct TValues {
        uint256 amount;
        uint256 transferAmount;
        uint256 fee;
        uint256 buyFee;
        uint256 sellFee;
        uint256 buyBonus;
        uint256 timeFee;
        uint256 operationalFee;
    }

    LINKConsumer public consumer;
    FeeHandler public feeController;
    DeJa public jackpot;
    IUniswapV2Router02 public router;

    modifier dejaOnly {
        require(msg.sender == dejaAddr, "only deja can call");
        _;
    }

    modifier operationsOnly {
        require(msg.sender == owner() || msg.sender == opAddr, "unauthorized caller");
        _;
    }
    // IUniswapV2Router02 uniswapV2Router
    constructor () public {
        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        opAddr = address(0x36D5974141cC07CadF50cD1Af440C34bA6637ec5); // TODO change when mainnet

        consumer = new LINKConsumer(address(this));
        jackpot = new DeJa(address(this));
        feeController = new FeeHandler(address(this));

        _rOwned[_msgSender()] = _rTotal;

        dejaAddr = address(jackpot);
        LINKConsumerAddr = address(consumer);
        feeHandlerAddr = address(feeController);

        currentPoolAddress = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());
        currentPairAddress = router.WETH();

        setRandomSeed(block.timestamp.mod(42));

        // set the pool as the address? or the current pair address?
        setTransferPairAddress(currentPairAddress, true);

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isReflectExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function isExcluded(address account) public view returns (bool) {
        return _isReflectExcluded[account];
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function totalBurned() public view returns (uint256) {
        return _tBurnTotal;
    }

    function reflect(uint256 tAmount) public {
        address sender = _msgSender();
        require(!_isReflectExcluded[sender], "Excluded addresses cannot call this function");
        (RValues memory r,) = _getValues(sender, tAmount, !_isFeeless[sender], TState.Normal);
        _rOwned[sender] = _rOwned[sender].sub(r.amount);
        _rTotal = _rTotal.sub(r.amount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee, TState transferState) internal returns (uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (RValues memory r,) = _getValues(_msgSender(), tAmount, true, transferState);
            return r.amount;
        } else {
            (RValues memory r,) = _getValues(_msgSender(), tAmount, true, transferState);
            return r.transferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function excludeAccount(address account) external onlyOwner() {
        require(!_isReflectExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isReflectExcluded[account] = true;
        _reflectExcluded.push(account);
    }

    function includeAccount(address account) external onlyOwner() {
        require(_isReflectExcluded[account], "Account is already excluded");
        for (uint256 i = 0; i < _reflectExcluded.length; i++) {
            if (_reflectExcluded[i] == account) {
                _reflectExcluded[i] = _reflectExcluded[_reflectExcluded.length - 1];
                _tOwned[account] = 0;
                _isReflectExcluded[account] = false;
                _reflectExcluded.pop();
                break;
            }
        }
    }

    function getRBalance(address account) public view returns (uint256) {
        return _rOwned[account];
    }

    function awardWinners(address first, uint256 firstPrize, address second, uint256 secondPrize, address caller, uint256 callerPrize) public dejaOnly {
        _rOwned[prizePool] = 0;
        _rOwned[first]  = _rOwned[first].add(firstPrize);
        _rOwned[second] = _rOwned[second].add(secondPrize);
        _rOwned[caller] = _rOwned[caller].add(callerPrize);
        // burn ceremony
        _burnTokensInLP();
        emit Awarded(first, firstPrize, second, secondPrize, caller, callerPrize);
    }


    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function BCYCLWinner() public {
        require(jackpot.isBuyWinnerCallable(), "not ready to call a winner");
        consumer.getRandomNumber(randomSeed, msg.sender);
    }


    function _burnTokensInLP() internal {
        uint256 rate = _getRate();
        uint256 tokenLPBurnAmount = _tOwned[currentPoolAddress].div(feeController.TokenInLPBurn()); // 50 == 2% of current pool
        uint256 rTokenLPBurnAmount = tokenLPBurnAmount.mul(rate);
        _rOwned[currentPoolAddress] = _rOwned[currentPoolAddress].sub(rTokenLPBurnAmount);
        _rOwned[address(0)] = _rOwned[address(0)].add(rTokenLPBurnAmount);
        emit TokensInLPBurned(rTokenLPBurnAmount, tokenLPBurnAmount);
        syncPool();
    }

    function _burnTotalSupply() internal {
        require(feeController._burnRate() >= 100, "can't set total supply burn to be more than 1% per tx");
        uint256 burnAmount = _tTotal.div(feeController._burnRate());
        _tTotal = _tTotal.sub(burnAmount);
        _tBurnTotal = _tBurnTotal.add(burnAmount);
        emit BurnedFromTotalSupply(burnAmount);
        // this will need to be synced later but can show burn through the dashboard at least
    }

    function enableTrading() public onlyOwner {
        paused = false;
    }

    function _getValues(address sender, uint256 tAmount, bool hasFee, TState transferState) internal returns (RValues memory r, TValues memory t) {
        (uint256 rSupply, uint256 tSupply) = _getCirculatingSupply();
        if(hasFee){
            feeController.checkCycle(); // put it here so we don't have to check cycle every tx which can cost more gas
            t = feeController.calculateTFees(sender, tAmount, hasFee, tSupply, transferState);
        } else {
            t = _getTValues(tAmount);
        }
        r = _getRValues(t, hasFee, rSupply.div(tSupply));
    }

    function _getTValues(uint256 tAmount) internal pure returns (TValues memory t) {
        t.amount = tAmount;
        t.transferAmount = tAmount;
        return t;
    }

    function _getRValues(TValues memory t, bool hasFee, uint256 currentRate) internal pure returns (RValues memory r) {
        r.amount = t.amount.mul(currentRate);
        if(hasFee) {
            r.fee = t.fee.mul(currentRate);
            r.timeFee = t.timeFee.mul(currentRate);
            r.operationalFee = t.operationalFee.mul(currentRate);
            r.sellFee = t.sellFee.mul(currentRate);
            r.buyFee = t.buyFee.mul(currentRate);
            r.buyBonus = t.buyBonus.mul(currentRate);
        }
        r.transferAmount = r.amount.sub(r.fee).sub(r.sellFee).sub(r.buyFee).sub(r.operationalFee).sub(r.timeFee);
        return r;
    }

    function _getRate() internal view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCirculatingSupply();
        return rSupply.div(tSupply);
    }

    function _getCirculatingSupply() internal view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _reflectExcluded.length; i++) {
            if (_rOwned[_reflectExcluded[i]] > rSupply || _tOwned[_reflectExcluded[i]] > tSupply) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_reflectExcluded[i]]);
            tSupply = tSupply.sub(_tOwned[_reflectExcluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _getTState(address sender, address recipient) internal view returns (TState transferState) {
        if (_transferPairAddress[sender]) {
            transferState = TState.Buy;
        } else if (_transferPairAddress[recipient]) {
            transferState = TState.Sell;
        } else {
            transferState = TState.Normal;
        }
        return transferState;
    }

    function _getTType(address sender, address recipient) internal view returns (TxType t) {
        if (_isReflectExcluded[sender] && !_isReflectExcluded[recipient]) {
            t = TxType.FromExcluded;
        } else if (!_isReflectExcluded[sender] && _isReflectExcluded[recipient]) {
            t = TxType.ToExcluded;
        } else if (!_isReflectExcluded[sender] && !_isReflectExcluded[recipient]) {
            t = TxType.Standard;
        } else if (_isReflectExcluded[sender] && _isReflectExcluded[recipient]) {
            t = TxType.BothExcluded;
        } else {
            t = TxType.Standard;
        }
        return t;
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        // TODO make sure can transfer from presales
        if(sender != address(this)) {
            require(paused == false, "Transfers are paused");
        }

        bool hasFee = !_isFeeless[sender] && !_isFeeless[recipient];
        TState transferState = _getTState(sender, recipient);
        TxType t = _getTType(sender, recipient);
        _reflectionTransfer(sender, recipient, amount, hasFee, transferState, t);
    }

    function _reflectionTransfer(address sender, address recipient, uint256 tAmount, bool hasFee, TState tState, TxType txType) internal {

        (RValues memory r, TValues memory t) = _getValues(sender, tAmount, hasFee, tState);

        if (txType == TxType.ToExcluded) {
            _rOwned[bonusSupplyPool] = _rOwned[bonusSupplyPool].sub(r.buyBonus).add(r.sellFee);
            _rOwned[sender] = _rOwned[sender].sub(r.amount);
            _tOwned[recipient] = _tOwned[recipient].add(t.transferAmount.add(t.buyBonus));
            _rOwned[recipient] = _rOwned[recipient].add(r.transferAmount.add(r.buyBonus));
        } else if (txType == TxType.FromExcluded) {
            _rOwned[bonusSupplyPool] = _rOwned[bonusSupplyPool].sub(r.buyBonus).add(r.sellFee);
            _tOwned[sender] = _tOwned[sender].sub(t.amount);
            _rOwned[sender] = _rOwned[sender].sub(r.amount);
            _rOwned[recipient] = _rOwned[recipient].add(r.transferAmount.add(r.buyBonus));
        } else if (txType == TxType.BothExcluded) {
            _rOwned[bonusSupplyPool] = _rOwned[bonusSupplyPool].sub(r.buyBonus).add(r.sellFee);
            _tOwned[sender] = _tOwned[sender].sub(t.amount);
            _rOwned[sender] = _rOwned[sender].sub(r.amount);
            _tOwned[recipient] = _tOwned[recipient].add(t.transferAmount.add(t.buyBonus));
            _rOwned[recipient] = _rOwned[recipient].add(r.transferAmount.add(r.buyBonus));
        } else {
            jackpot.checkBCYCL(sender, tState, hasFee);
            _rOwned[bonusSupplyPool] = _rOwned[bonusSupplyPool].sub(r.buyBonus).add(r.sellFee);
            _rOwned[prizePool] = _rOwned[prizePool].add(r.buyFee);
            _rOwned[opAddr] = _rOwned[opAddr].add(r.operationalFee);
            if(t.timeFee > 0) {
                // we give half to the front-runned victim and half to everyone else
                uint256 tCompensation = t.timeFee.div(2);
                uint256 rCompensation = r.timeFee.div(2);
                if(feeController._lastTState() == TState.Buy && tState == TState.Sell) {
                    address lastBuyer = feeController.lastBuyer();
                    _rOwned[lastBuyer] = _rOwned[lastBuyer].add(rCompensation);
                    _tOwned[lastBuyer] = _tOwned[lastBuyer].add(tCompensation);
                    emit AddedCompensationToVictim(lastBuyer, tCompensation, rCompensation);
                }
                if(feeController._lastTState() == TState.Sell && tState == TState.Buy) {
                    address lastSeller = feeController.lastSeller();
                    _rOwned[lastSeller] = _rOwned[lastSeller].add(rCompensation);
                    _tOwned[lastSeller] = _tOwned[lastSeller].add(tCompensation);
                    emit AddedCompensationToVictim(lastSeller, tCompensation, rCompensation);

                }
                t.timeFee = tCompensation;
                r.timeFee = rCompensation;
            }
            _tFeeTotal = _tFeeTotal.sub(t.sellFee).sub(t.buyFee).sub(t.operationalFee).sub(t.timeFee);
            _rOwned[sender] = _rOwned[sender].sub(r.amount);
            _rOwned[recipient] = _rOwned[recipient].add(r.transferAmount.add(r.buyBonus));
            feeController.setLastTx(sender, tState, r, t);
        }
        // we add the time fee here in case front run attempts were attempted
        _reflectFee(r.fee.add(r.timeFee), t.fee.add(t.timeFee));
        // prune any 0 balance senders
        jackpot.checkHolder(sender, balanceOf(sender));
        emit BonusSupplyChange(tokenFromReflection(r.buyBonus), tokenFromReflection(r.sellFee));
        emit Transfer(sender, recipient, t.transferAmount.add(t.buyBonus));
    }

    function _reflectFee(uint256 rFee, uint256 tFee) internal {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
        // do 1% burn here
        _burnTotalSupply();
    }

    // in case people send tokens to this contract :facepalms:
    function recoverERC20(address tokenAddress, uint256 tokenAmount) public operationsOnly {
        IERC20(tokenAddress).transfer(owner(), tokenAmount);
    }

    function setTransferPairAddress(address transferPairAddress, bool value) public onlyOwner {
        _transferPairAddress[transferPairAddress] = value;
    }

    function setOp(address _opAddress) public operationsOnly {
        opAddr = _opAddress;
    }

    function setRandomSeed(uint256 seed) public operationsOnly {
        require(seed > 0, "seed must be greater than 0");
        randomSeed = seed;
    }

    function syncPool() public operationsOnly {
        IUniswapV2Pair(currentPoolAddress).sync();
    }

    function updateLPAddress(address _poolAddress, address _pairTokenAddress) public onlyOwner() {
        require(_poolAddress != address(0), "Pool address is zero.");
        require(_pairTokenAddress != address(0), "Pair token address is zero.");
        require(_pairTokenAddress != address(this), "Pair token address self address.");
        require(_pairTokenAddress != currentPairAddress, "Pair token address is same as current one.");

        currentPoolAddress = _poolAddress;
        currentPairAddress = _pairTokenAddress;

    }

    function ultraRebase(uint256 rate) external operationsOnly {
        // this would effectively be a super positive rebase.
        require(_tTotal < 10000, "still too much tTotal");
        uint256 burned = _tBurnTotal.div(rate); // 1 if you want to rebase the whole thing
        _tBurnTotal = _tBurnTotal.sub(burned);
        _tTotal = _tTotal.add(burned);
        IUniswapV2Pair(currentPoolAddress).sync();
    }

}